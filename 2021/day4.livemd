# Day 4

## Setup

```elixir
Mix.install([{:kino, "~> 0.4.0"}])
```

```elixir
input = Kino.Input.textarea("Add input:")
```

```elixir
[inps | boards] =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)

nums =
  inps
  |> String.split(",")
  |> Enum.map(&String.to_integer/1)
```

## Key 6

```elixir
defmodule FlatBoard do
  @enforce_keys [:fb]
  defstruct fb: []

  def new(board) when is_list(board) do
    %FlatBoard{fb: board}
  end

  def mark(%FlatBoard{fb: fb}, number) do
    # put_elem(fb[Integer.to_string(number) |> String.to_atom()], 1, true)
    num = Integer.to_string(number) |> String.to_atom()

    fb
    |> Enum.map(fn {k, v} -> if num == k, do: {k, true}, else: {k, v} end)
    |> FlatBoard.new()
  end

  def won(%FlatBoard{fb: fb}) do
    row_won?(fb) || col_won?(fb)
  end

  defp row_won?(fb) when is_list(fb) do
    fb
    |> Enum.chunk_every(5)
    |> Enum.any?(fn x ->
      x
      |> Enum.reduce_while(true, fn {_, ac}, y ->
        if ac and y, do: {:cont, true}, else: {:halt, false}
      end)
    end)
  end

  def col_won?(fb) when is_list(fb) do
    nfb =
      fb
      |> Enum.chunk_every(5)

    for i <- 0..4 do
      Enum.map(nfb, &Enum.at(&1, i))
    end
    |> Enum.any?(fn x ->
      x
      |> Enum.reduce_while(true, fn {_, ac}, y ->
        if ac and y, do: {:cont, true}, else: {:halt, false}
      end)
    end)
  end

  def unmarked_sum(%FlatBoard{fb: fb}) do
    fb
    |> Enum.filter(fn {_, n} -> Kernel.not(n) end)
    |> Enum.map(fn {n, _} -> Atom.to_string(n) |> String.to_integer() end)
    |> Enum.sum()
  end
end
```

```elixir
flatboards =
  boards
  |> Enum.chunk_every(5)
  |> Enum.map(
    &(Enum.map(
        &1,
        fn s ->
          String.split(s, " ", trim: true)
          |> Enum.map(fn n -> {String.to_atom(n), false} end)
        end
      )
      |> List.flatten())
  )
  |> Enum.map(&FlatBoard.new/1)

{nn, fbb} =
  nums
  |> Enum.reduce_while(
    flatboards,
    fn num, fbs ->
      nfbs = Enum.map(fbs, &FlatBoard.mark(&1, num))
      if fb = Enum.find(nfbs, &FlatBoard.won/1), do: {:halt, {num, fb}}, else: {:cont, nfbs}
    end
  )

ll =
  fbb
  |> FlatBoard.unmarked_sum()

nn * ll
```

```elixir
{nn2, fbb2} =
  nums
  |> Enum.reduce_while(
    flatboards,
    fn num, fbs ->
      nfbs = Enum.map(fbs, &FlatBoard.mark(&1, num))

      case Enum.reject(nfbs, &FlatBoard.won/1) do
        [] ->
          [fb] = nfbs
          {:halt, {num, fb}}

        nfbss ->
          {:cont, nfbss}
      end
    end
  )

nn2 * FlatBoard.unmarked_sum(fbb2)
```
